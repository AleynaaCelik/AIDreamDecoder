// <auto-generated />
using System;
using AIDreamDecoder.Infrastructure.Persistence.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AIDreamDecoder.Infrastructure.Persistence.Migrations.ApplicationDB
{
    [DbContext(typeof(AIDreamDecoderDbContext))]
    partial class AIDreamDecoderDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AIDreamDecoder.Domain.Entities.Dream", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Dreams");
                });

            modelBuilder.Entity("AIDreamDecoder.Domain.Entities.DreamAnalysis", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AnalysisResult")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DreamId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DreamId")
                        .IsUnique();

                    b.ToTable("DreamAnalyses");
                });

            modelBuilder.Entity("AIDreamDecoder.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("AIDreamDecoder.Domain.Entities.Dream", b =>
                {
                    b.HasOne("AIDreamDecoder.Domain.Entities.User", "User")
                        .WithMany("Dreams")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AIDreamDecoder.Domain.Entities.DreamAnalysis", b =>
                {
                    b.HasOne("AIDreamDecoder.Domain.Entities.Dream", "Dream")
                        .WithOne("Analysis")
                        .HasForeignKey("AIDreamDecoder.Domain.Entities.DreamAnalysis", "DreamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dream");
                });

            modelBuilder.Entity("AIDreamDecoder.Domain.Entities.Dream", b =>
                {
                    b.Navigation("Analysis")
                        .IsRequired();
                });

            modelBuilder.Entity("AIDreamDecoder.Domain.Entities.User", b =>
                {
                    b.Navigation("Dreams");
                });
#pragma warning restore 612, 618
        }
    }
}
